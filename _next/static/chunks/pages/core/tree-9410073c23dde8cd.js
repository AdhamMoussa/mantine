(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[43300],{47333:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/core/tree",function(){return t(93456)}])},93456:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return g}});var a=t(52322),o=t(45392),d=t(15601),l=t(76947);let s={type:"code",component:function(){return(0,a.jsx)(d.m,{data:l.a})},code:[{fileName:"Demo.tsx",language:"tsx",code:`
import { Tree } from '@mantine/core';
import { data } from './data';

function Demo() {
  return <Tree data={data} />;
}
`},{fileName:"data.ts",language:"tsx",code:l.o}]};var r=t(92536),i=t(93010);let c={type:"code",component:function(){return(0,a.jsx)(d.m,{data:l.a,levelOffset:23,renderNode:({node:e,expanded:n,hasChildren:t,elementProps:o})=>(0,a.jsxs)(i.Z,{gap:5,...o,children:[t&&(0,a.jsx)(r.Z,{size:18,style:{transform:n?"rotate(180deg)":"rotate(0deg)"}}),(0,a.jsx)("span",{children:e.label})]})})},code:[{fileName:"Demo.tsx",language:"tsx",code:`
import { IconChevronDown } from '@tabler/icons-react';
import { Group, Tree } from '@mantine/core';
import { data } from './data';

function Demo() {
  return (
    <Tree
      data={data}
      levelOffset={23}
      renderNode={({ node, expanded, hasChildren, elementProps }) => (
        <Group gap={5} {...elementProps}>
          {hasChildren && (
            <IconChevronDown
              size={18}
              style={{ transform: expanded ? 'rotate(180deg)' : 'rotate(0deg)' }}
            />
          )}

          <span>{node.label}</span>
        </Group>
      )}
    />
  );
}
`},{fileName:"data.ts",language:"tsx",code:l.o}]};var p=t(30911),h=t(17115);let u={type:"code",component:function(){let e=(0,p.Z)();return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(d.m,{data:l.a,tree:e}),(0,a.jsxs)(i.Z,{mt:"md",children:[(0,a.jsx)(h.z,{onClick:()=>e.expandAllNodes(),children:"Expand all"}),(0,a.jsx)(h.z,{onClick:()=>e.collapseAllNodes(),children:"Collapse all"})]})]})},code:[{fileName:"Demo.tsx",language:"tsx",code:`
import { Button, Group, Tree, useTree } from '@mantine/core';
import { data } from './data';

function Demo() {
  const tree = useTree();

  return (
    <>
      <Tree data={data} tree={tree} />
      <Group mt="md">
        <Button onClick={() => tree.expandAllNodes()}>Expand all</Button>
        <Button onClick={() => tree.collapseAllNodes()}>Collapse all</Button>
      </Group>
    </>
  );
}
`},{fileName:"data.ts",language:"tsx",code:l.o}]};var x=t(29466),m=t(25071),f=t(15019);let j=(0,m.A)(f.us.Tree);function v(e){let n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components},{Demo:t}=n;return t||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Demo",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Tree"})," component is used to display hierarchical data. ",(0,a.jsx)(n.code,{children:"Tree"})," component\nhas minimal styling by default, you can customize styles with ",(0,a.jsx)(n.a,{href:"/styles/styles-api",children:"Styles API"}),"."]}),"\n",(0,a.jsx)(t,{data:s}),"\n",(0,a.jsx)(n.h2,{id:"data-prop",children:"Data prop"}),"\n",(0,a.jsxs)(n.p,{children:["Data passed to the ",(0,a.jsx)(n.code,{children:"data"})," prop should follow these rules:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Data must be an array"}),"\n",(0,a.jsx)(n.li,{children:"Each item in the array represents a node in the tree"}),"\n",(0,a.jsxs)(n.li,{children:["Each node must be an object with ",(0,a.jsx)(n.code,{children:"value"})," and ",(0,a.jsx)(n.code,{children:"label"})," keys"]}),"\n",(0,a.jsxs)(n.li,{children:["Each node can have ",(0,a.jsx)(n.code,{children:"children"})," key with an array of child nodes"]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"value"})," of each node must be unique"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Valid data example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"// ✅ Valid data, all values are unique\nconst data = [\n  {\n    value: 'src',\n    label: 'src',\n    children: [\n      { value: 'src/components', label: 'components' },\n      { value: 'src/hooks', label: 'hooks' },\n    ],\n  },\n  { value: 'package.json', label: 'package.json' },\n];\n"})}),"\n",(0,a.jsx)(n.p,{children:"Invalid data example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"// ❌ Invalid data, values are not unique (components is used twice)\nconst data = [\n  {\n    value: 'src',\n    label: 'src',\n    children: [{ value: 'components', label: 'components' }],\n  },\n  { value: 'components', label: 'components' },\n];\n"})}),"\n",(0,a.jsx)(n.h2,{id:"data-type",children:"Data type"}),"\n",(0,a.jsxs)(n.p,{children:["You can import ",(0,a.jsx)(n.code,{children:"TreeNodeData"})," type to define data type for your tree:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { TreeNodeData } from '@mantine/core';\n\nconst data: TreeNodeData[] = [\n  {\n    value: 'src',\n    label: 'src',\n    children: [\n      { value: 'src/components', label: 'components' },\n      { value: 'src/hooks', label: 'hooks' },\n    ],\n  },\n  { value: 'package.json', label: 'package.json' },\n];\n"})}),"\n",(0,a.jsx)(n.h2,{id:"rendernode",children:"renderNode"}),"\n",(0,a.jsxs)(n.p,{children:["Use ",(0,a.jsx)(n.code,{children:"renderNode"})," prop to customize node rendering.\n",(0,a.jsx)(n.code,{children:"renderNode"})," function receives an object with the following properties as a single argument:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"export interface RenderTreeNodePayload {\n  /** Node level in the tree */\n  level: number;\n\n  /** `true` if the node is expanded, applicable only for nodes with `children` */\n  expanded: boolean;\n\n  /** `true` if the node has non-empty `children` array */\n  hasChildren: boolean;\n\n  /** `true` if the node is selected */\n  selected: boolean;\n\n  /** Node data from the `data` prop of `Tree` */\n  node: TreeNodeData;\n\n  /** Props to spread into the root node element */\n  elementProps: {\n    className: string;\n    style: React.CSSProperties;\n    onClick: (event: React.MouseEvent) => void;\n    'data-selected': boolean | undefined;\n    'data-value': string;\n    'data-hovered': boolean | undefined;\n  };\n}\n"})}),"\n",(0,a.jsx)(t,{data:c}),"\n",(0,a.jsx)(n.h2,{id:"usetree-hook",children:"useTree hook"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"useTree"})," hook can be used to control selected and expanded state of the tree."]}),"\n",(0,a.jsx)(n.p,{children:"The hook accepts an object with the following properties:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"export interface UseTreeInput {\n  /** Initial expanded state of all nodes */\n  initialExpandedState?: TreeExpandedState;\n\n  /** Initial selected state of nodes */\n  initialSelectedState?: string[];\n\n  /** Determines whether multiple node can be selected at a time */\n  multiple?: boolean;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"And returns an object with the following properties:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"export interface UseTreeReturnType {\n  /** Determines whether multiple node can be selected at a time */\n  multiple: boolean;\n\n  /** A record of `node.value` and boolean values that represent nodes expanded state */\n  expandedState: TreeExpandedState;\n\n  /** An array of selected nodes values */\n  selectedState: string[];\n\n  /** A value of the node that was last clicked\n   * Anchor node is used to determine range of selected nodes for multiple selection\n   */\n  anchorNode: string | null;\n\n  /** Initializes tree state based on provided data, called automatically by the Tree component */\n  initialize: (data: TreeNodeData[]) => void;\n\n  /** Toggles expanded state of the node with provided value */\n  toggleExpanded: (value: string) => void;\n\n  /** Collapses node with provided value */\n  collapse: (value: string) => void;\n\n  /** Expands node with provided value */\n  expand: (value: string) => void;\n\n  /** Expands all nodes */\n  expandAllNodes: () => void;\n\n  /** Collapses all nodes */\n  collapseAllNodes: () => void;\n\n  /** Sets expanded state */\n  setExpandedState: React.Dispatch<\n    React.SetStateAction<TreeExpandedState>\n  >;\n\n  /** Toggles selected state of the node with provided value */\n  toggleSelected: (value: string) => void;\n\n  /** Selects node with provided value */\n  select: (value: string) => void;\n\n  /** Deselects node with provided value */\n  deselect: (value: string) => void;\n\n  /** Clears selected state */\n  clearSelected: () => void;\n\n  /** Sets selected state */\n  setSelectedState: React.Dispatch<React.SetStateAction<string[]>>;\n\n  /** A value of the node that is currently hovered */\n  hoveredNode: string | null;\n\n  /** Sets hovered node */\n  setHoveredNode: React.Dispatch<React.SetStateAction<string | null>>;\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You can pass the value returned by the ",(0,a.jsx)(n.code,{children:"useTree"})," hook to the ",(0,a.jsx)(n.code,{children:"tree"})," prop of the ",(0,a.jsx)(n.code,{children:"Tree"})," component\nto control tree state:"]}),"\n",(0,a.jsx)(t,{data:u}),"\n",(0,a.jsx)(n.h2,{id:"example-files-tree",children:"Example: files tree"}),"\n",(0,a.jsx)(t,{data:x.Q})]})}function g(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,a.jsx)(j,{...e,children:(0,a.jsx)(v,{...e})})}}},function(e){e.O(0,[61177,66748,11340,29466,92888,49774,40179],function(){return e(e.s=47333)}),_N_E=e.O()}]);