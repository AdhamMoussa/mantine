(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[43589],{98002:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/form/schema-validation",function(){return t(98838)}])},98838:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return m}});var s=t(52322),a=t(45392),o=t(79016),r=t(33638);let i=(0,o.A)(r.us.formSchemaValidation);function l(e){let n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components},{InstallScript:t}=n;return t||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("InstallScript",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"schema-based-validation",children:"Schema based validation"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"@mantine/form"})," supports schema validation with:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/zod",children:"zod"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/joi",children:"joi"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/yup",children:"yup"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/superstruct",children:"superstruct"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/valibot",children:"valibot"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["You need to install one of the libraries yourself, ",(0,s.jsx)(n.code,{children:"@mantine/form"})," package does not depend on any of them.\nIf you do not know what schema validation library to choose, use ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/zod",children:"zod"}),",\nit is the most modern and developer-friendly library."]}),"\n",(0,s.jsx)(n.h2,{id:"zod",children:"zod"}),"\n",(0,s.jsx)(n.p,{children:"Installation:"}),"\n",(0,s.jsx)(t,{packages:"zod mantine-form-zod-resolver"}),"\n",(0,s.jsx)(n.p,{children:"Basic fields validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { zodResolver } from 'mantine-form-zod-resolver';\nimport { z } from 'zod';\nimport { useForm } from '@mantine/form';\n\nconst schema = z.object({\n  name: z\n    .string()\n    .min(2, { message: 'Name should have at least 2 letters' }),\n  email: z.string().email({ message: 'Invalid email' }),\n  age: z.number().min(18, {\n    message: 'You must be at least 18 to create an account',\n  }),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    name: '',\n    email: '',\n    age: 16,\n  },\n  validate: zodResolver(schema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  name: 'Name should have at least 2 letters',\n//  email: 'Invalid email',\n//  age: 'You must be at least 18 to create an account'\n// }\n"})}),"\n",(0,s.jsx)(n.p,{children:"Nested fields validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { zodResolver } from 'mantine-form-zod-resolver';\nimport { z } from 'zod';\nimport { useForm } from '@mantine/form';\n\nconst nestedSchema = z.object({\n  nested: z.object({\n    field: z\n      .string()\n      .min(2, { message: 'Field should have at least 2 letters' }),\n  }),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    nested: {\n      field: '',\n    },\n  },\n  validate: zodResolver(nestedSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'nested.field': 'Field should have at least 2 letters',\n// }\n"})}),"\n",(0,s.jsx)(n.p,{children:"List fields validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { zodResolver } from 'mantine-form-zod-resolver';\nimport { z } from 'zod';\nimport { useForm } from '@mantine/form';\n\nconst listSchema = z.object({\n  list: z.array(\n    z.object({\n      name: z\n        .string()\n        .min(2, { message: 'Name should have at least 2 letters' }),\n    })\n  ),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    list: [{ name: '' }],\n  },\n  validate: zodResolver(listSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'list.0.name': 'Name should have at least 2 letters',\n// }\n"})}),"\n",(0,s.jsx)(n.h2,{id:"yup",children:"yup"}),"\n",(0,s.jsx)(n.p,{children:"Installation:"}),"\n",(0,s.jsx)(t,{packages:"yup mantine-form-yup-resolver"}),"\n",(0,s.jsx)(n.p,{children:"Basic fields validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { yupResolver } from 'mantine-form-yup-resolver';\nimport * as yup from 'yup';\nimport { useForm } from '@mantine/form';\n\nconst schema = yup.object().shape({\n  name: yup.string().min(2, 'Name should have at least 2 letters'),\n  email: yup\n    .string()\n    .required('Invalid email')\n    .email('Invalid email'),\n  age: yup\n    .number()\n    .min(18, 'You must be at least 18 to create an account'),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    name: '',\n    email: '',\n    age: 16,\n  },\n  validate: yupResolver(schema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  name: 'Name should have at least 2 letters',\n//  email: 'Invalid email',\n//  age: 'You must be at least 18 to create an account'\n// }\n"})}),"\n",(0,s.jsx)(n.p,{children:"Nested fields validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { yupResolver } from 'mantine-form-yup-resolver';\nimport * as yup from 'yup';\nimport { useForm } from '@mantine/form';\n\nconst nestedSchema = yup.object().shape({\n  nested: yup.object().shape({\n    field: yup\n      .string()\n      .min(2, 'Field should have at least 2 letters'),\n  }),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    nested: {\n      field: '',\n    },\n  },\n  validate: yupResolver(nestedSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'nested.field': 'Field should have at least 2 letters',\n// }\n"})}),"\n",(0,s.jsx)(n.p,{children:"List fields validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { yupResolver } from 'mantine-form-yup-resolver';\nimport * as yup from 'yup';\nimport { useForm } from '@mantine/form';\n\nconst listSchema = yup.object().shape({\n  list: yup.array().of(\n    yup.object().shape({\n      name: yup\n        .string()\n        .min(2, 'Name should have at least 2 letters'),\n    })\n  ),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    list: [{ name: '' }],\n  },\n  validate: yupResolver(listSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'list.0.name': 'Name should have at least 2 letters',\n// }\n"})}),"\n",(0,s.jsx)(n.h2,{id:"joi",children:"joi"}),"\n",(0,s.jsx)(n.p,{children:"Installation:"}),"\n",(0,s.jsx)(t,{packages:"joi mantine-form-joi-resolver"}),"\n",(0,s.jsx)(n.p,{children:"Basic fields validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import Joi from 'joi';\nimport { joiResolver } from 'mantine-form-joi-resolver';\nimport { useForm } from '@mantine/form';\n\nconst schema = Joi.object({\n  name: Joi.string().min(2).messages({\n    'string.min': 'Name should have at least 2 letters',\n    'string.empty': 'Name should have at least 2 letters',\n  }),\n  email: Joi.string()\n    .email({ tlds: { allow: false } })\n    .messages({\n      'string.email': 'Invalid email',\n      'string.empty': 'Invalid email',\n    }),\n  age: Joi.number()\n    .min(18)\n    .message('You must be at least 18 to create an account'),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    name: '',\n    email: '',\n    age: 16,\n  },\n  validate: joiResolver(schema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  name: 'Name should have at least 2 letters',\n//  email: 'Invalid email',\n//  age: 'You must be at least 18 to create an account'\n// }\n"})}),"\n",(0,s.jsx)(n.p,{children:"Nested fields validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import Joi from 'joi';\nimport { joiResolver } from 'mantine-form-joi-resolver';\nimport { useForm } from '@mantine/form';\n\nconst nestedSchema = Joi.object({\n  nested: Joi.object({\n    field: Joi.string().min(2).messages({\n      'string.min': 'Field should have at least 2 letters',\n      'string.empty': 'Field should have at least 2 letters',\n    }),\n  }),\n});\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    nested: {\n      field: '',\n    },\n  },\n  validate: joiResolver(nestedSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'nested.field': 'Field should have at least 2 letters',\n// }\n"})}),"\n",(0,s.jsx)(n.p,{children:"List fields validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import Joi from 'joi';\nimport { joiResolver } from 'mantine-form-joi-resolver';\nimport { useForm } from '@mantine/form';\n\nconst listSchema = Joi.object({\n  list: Joi.array().items(\n    Joi.object({\n      name: Joi.string().min(2).messages({\n        'string.min': 'Name should have at least 2 letters',\n        'string.empty': 'Name should have at least 2 letters',\n      }),\n    })\n  ),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    list: [{ name: '' }],\n  },\n  validate: joiResolver(listSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'list.0.name': 'Name should have at least 2 letters',\n// }\n"})}),"\n",(0,s.jsx)(n.h2,{id:"superstruct",children:"superstruct"}),"\n",(0,s.jsx)(n.p,{children:"Installation:"}),"\n",(0,s.jsx)(t,{packages:"superstruct mantine-form-superstruct-resolver"}),"\n",(0,s.jsx)(n.p,{children:"Basic fields validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import isEmail from 'is-email';\nimport { superstructResolver } from 'mantine-form-superstruct-resolver';\nimport * as s from 'superstruct';\n\nconst emailString = s.define('email', isEmail);\n\nconst schema = s.object({\n  name: s.size(s.string(), 2, 30),\n  email: emailString,\n  age: s.min(s.number(), 18),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    name: '',\n    email: '',\n    age: 16,\n  },\n  validate: superstructResolver(schema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//   name: 'name: Expected a string with a length between `2` and `30` but received one with a length of `0`',\n//   email: 'email: Expected a value of type `email`, but received: `\"\"`',\n//   age: 'age: Expected a number greater than or equal to 18 but received `16`',\n// }\n"})}),"\n",(0,s.jsx)(n.p,{children:"Nested fields validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { superstructResolver } from 'mantine-form-superstruct-resolver';\nimport * as s from 'superstruct';\nimport { useForm } from '@mantine/form';\n\nconst nestedSchema = s.object({\n  nested: s.object({\n    field: s.size(s.string(), 2, 30),\n  }),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    nested: {\n      field: '',\n    },\n  },\n  validate: superstructResolver(nestedSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'nested.field': 'nested field: Expected a string with a length between `2` and `30` but received one with a length of `0`',\n// }\n"})}),"\n",(0,s.jsx)(n.p,{children:"List fields validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { superstructResolver } from 'mantine-form-superstruct-resolver';\nimport * as s from 'superstruct';\nimport { useForm } from '@mantine/form';\n\nconst listSchema = s.object({\n  list: s.array(\n    s.object({\n      name: s.size(s.string(), 2, 30),\n    })\n  ),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    list: [{ name: '' }],\n  },\n  validate: superstructResolver(listSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'list 0 name: Expected a string with a length between `2` and `30` but received one with a length of `0`',\n// }\n"})}),"\n",(0,s.jsx)(n.h2,{id:"valibot",children:"valibot"}),"\n",(0,s.jsx)(n.p,{children:"Installation:"}),"\n",(0,s.jsx)(t,{packages:"valibot mantine-form-valibot-resolver"}),"\n",(0,s.jsx)(n.p,{children:"Basic fields validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { valibotResolver } from 'mantine-form-valibot-resolver';\nimport {\n  email,\n  minLength,\n  minValue,\n  number,\n  object,\n  string,\n} from 'valibot';\nimport { useForm } from '@mantine/form';\n\nconst schema = object({\n  name: string([minLength(2, 'Name should have at least 2 letters')]),\n  email: string([email('Invalid email')]),\n  age: number([\n    minValue(18, 'You must be at least 18 to create an account'),\n  ]),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    name: '',\n    email: '',\n    age: 16,\n  },\n  validate: valibotResolver(schema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  name: 'Name should have at least 2 letters',\n//  email: 'Invalid email',\n//  age: 'You must be at least 18 to create an account'\n// }\n"})}),"\n",(0,s.jsx)(n.p,{children:"Nested fields validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { valibotResolver } from 'mantine-form-valibot-resolver';\nimport { minLength, object, string } from 'valibot';\nimport { useForm } from '@mantine/form';\n\nconst nestedSchema = object({\n  nested: object({\n    field: string([\n      minLength(2, 'Field should have at least 2 letters'),\n    ]),\n  }),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    nested: {\n      field: '',\n    },\n  },\n  validate: valibotResolver(nestedSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'nested.field': 'Field should have at least 2 letters',\n// }\n"})}),"\n",(0,s.jsx)(n.p,{children:"List fields validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { valibotResolver } from 'mantine-form-valibot-resolver';\nimport { array, minLength, object, string } from 'valibot';\nimport { useForm } from '@mantine/form';\n\nconst listSchema = object({\n  list: array(\n    object({\n      name: string([\n        minLength(2, 'Name should have at least 2 letters'),\n      ]),\n    })\n  ),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    list: [{ name: '' }],\n  },\n  validate: valibotResolver(listSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'list.0.name': 'Name should have at least 2 letters',\n// }\n"})})]})}function m(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,s.jsx)(i,{...e,children:(0,s.jsx)(l,{...e})})}}},function(e){e.O(0,[57938,17454,47747,49774,92888,40179],function(){return e(e.s=98002)}),_N_E=e.O()}]);