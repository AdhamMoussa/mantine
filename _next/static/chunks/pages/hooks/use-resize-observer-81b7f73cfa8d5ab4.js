(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[92688],{8647:function(e,n,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/use-resize-observer",function(){return r(31962)}])},31962:function(e,n,r){"use strict";r.r(n),r.d(n,{default:function(){return x}});var t=r(24246),s=r(71670),o=r(27378),i=r(2256),Text=r(26569),c=r(22971),d=r(71078),l=r(94998),a=r(88936);let u=`
import { Text, Code, rem } from '@mantine/core';
import { useResizeObserver } from '@mantine/hooks';

function Demo() {
  const [ref, rect] = useResizeObserver();

  return (
    <>
      <textarea ref={ref} style={{ width: rem(400), height: rem(120) }} />
      <Text ta="center">Rect: <Code>{JSON.stringify(rect)}</Code></Text>
    </>
  );
}`,h={type:"code",code:u,component:function(){let e=(0,i.rZ)(),[n,r]=(0,a.y)();return o.createElement(o.Fragment,null,o.createElement(Text.x,{ta:"center",size:"sm",mb:"xs"},"Resize textarea by dragging its right bottom corner"),o.createElement(c.Z,{justify:"center"},o.createElement("textarea",{ref:n,style:{width:(0,d.h)(400),height:(0,d.h)(120),border:"none",backgroundColor:"var(--mantine-color-body)",position:"relative"}})),o.createElement(Text.x,{ta:"center",style:{marginTop:e.spacing.sm}},"Rect: ",o.createElement(l.E,null,JSON.stringify(r,null,2))))},dimmed:!0};var m=r(3916),b=r(54568);let f=(0,m.A)(b.us.useResizeObserver);function p(e){let n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components},{Demo:r}=n;return r||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Demo",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(r,{data:h}),"\n",(0,t.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"use-resize-observer"})," returns a ",(0,t.jsx)(n.code,{children:"ref"})," object that should be passed to the observed element, and the current element content rect, as returned by ",(0,t.jsx)(n.code,{children:"ResizeObserver"}),"'s callback ",(0,t.jsx)(n.code,{children:"entry.contentRect"}),".\nSee ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver",children:"Resize Observer API"})," documentation to learn more.\nOn the first render (as well as during SSR), or when no element is being observed, all of the properties are equal to ",(0,t.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { useResizeObserver } from '@mantine/hooks';\n\nfunction Demo() {\n  const [ref, rect] = useResizeObserver();\n  return <div ref={ref}>Observed</div>;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["See also ",(0,t.jsx)(n.a,{href:"https://mantine.dev/hooks/use-element-size/",children:"use-element-size"})," hook in case you need to subscribe only to ",(0,t.jsx)(n.code,{children:"width"})," and ",(0,t.jsx)(n.code,{children:"height"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"definition",children:"Definition"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"function useResizeObserver<T extends HTMLElement = any>(\n  options?: ResizeObserverOptions\n): [\n  RefObject<T>,\n  {\n    x: number;\n    y: number;\n    top: number;\n    left: number;\n    right: number;\n    bottom: number;\n    height: number;\n    width: number;\n  },\n];\n"})})]})}function x(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,t.jsx)(f,{...e,children:(0,t.jsx)(p,{...e})})}}},function(e){e.O(0,[30370,15819,2775,49774,92888,40179],function(){return e(e.s=8647)}),_N_E=e.O()}]);